// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generator jsonSchema {
//   provider              = "prisma-json-schema-generator"
//   includeRequiredFields = "true"
// }

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  address  String    @unique // address is used as email for admins
  password String? // if password is not null, he is admin, otherwise user
  balance  Int       @default(0)
  nodes    Node[]
  credits  Credit[]
  Staking  Staking[]
  role     Role      @default(USER) // default is user 

  @@map("users")
}

enum Status {
  CREATED
  INSTALLING
  LIVE
  FAILED
  EXPIRED
}

model Node {
  id           Int           @id @default(autoincrement())
  userId       Int           @map("user_id")
  user         User          @relation(fields: [userId], references: [id])
  serverId     Int           @map("server_id")
  server       Server        @relation(fields: [serverId], references: [id])
  wallet       String?
  status       Status        @default(CREATED)
  createdAt    DateTime      @default(now()) @map("created_at")
  nodeHistory  NodeHistory[]
  payments     Payment[]
  blockchainId Int           @map("blockchain_id")
  blockchain   Blockchain    @relation(fields: [blockchainId], references: [id])

  @@map("nodes")
}

model Staking {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  stakeId   String   @map("stake_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("stakings")
}

model NodeHistory {
  id      Int     @id @default(autoincrement())
  nodeId  Int     @unique @map("node_id")
  node    Node    @relation(fields: [nodeId], references: [id])
  message String?
  status  Status  @default(CREATED)

  @@map("node_histories")
}

model Server {
  id       Int     @id @default(autoincrement())
  host     String  @default("")
  port     Int     @default(22)
  username String  @default("")
  password String  @default("")
  active   Boolean
  nodes    Node[]

  @@map("servers")
}

model Payment {
  id       Int      @id @default(autoincrement())
  duration Int      @default(0)
  nodeId   Int      @map("node_id")
  node     Node     @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  credit   Int
  stakeId  String?  @map("stake_id")
  date     DateTime @default(now())

  @@map("payments")
}

model TxVerifier {
  id       Int    @id @default(autoincrement())
  verifier String @unique
  tx       Json

  @@map("tx_verifiers")
}

model Blockchain {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @default("")
  url         String
  price       Float
  hasWallet   Boolean  @default(false) @map("has_wallet")
  launchedAt  DateTime @default(now()) @map("launched_at")
  Node        Node[]

  @@map("blockchains")
}

model Credit {
  id      Int      @id @default(autoincrement())
  tx      String
  credits Int
  user    User     @relation(fields: [userId], references: [id])
  userId  Int      @map("user_id")
  date    DateTime @default(now())

  @@map("credits")
}

enum Role {
  USER
  ADMIN
}