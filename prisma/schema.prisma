generator client {
  provider = "prisma-client-js"
}

generator jsonSchema {
  provider              = "prisma-json-schema-generator"
  includeRequiredFields = "true"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  address     String        @unique
  password    String?
  balance     Int           @default(0)
  claims      claims[]
  credits     Credit[]
  nodes       Node[]
  Staking     Staking[]
  temp_claims temp_claims[]

  @@map("users")
}

model Node {
  id           Int          @id @default(autoincrement())
  userId       Int          @map("user_id")
  serverId     Int          @map("server_id")
  wallet       String?
  status       Status       @default(CREATED)
  createdAt    DateTime     @default(now()) @map("created_at")
  blockchainId Int          @map("blockchain_id")
  nodeHistory  NodeHistory?
  blockchain   Blockchain   @relation(fields: [blockchainId], references: [id])
  server       Server       @relation(fields: [serverId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
  payments     Payment[]

  @@map("nodes")
}

model Staking {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  stakeId   String   @map("stake_id")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])

  @@map("stakings")
}

model NodeHistory {
  id      Int     @id @default(autoincrement())
  nodeId  Int     @unique @map("node_id")
  message String?
  status  Status  @default(CREATED)
  node    Node    @relation(fields: [nodeId], references: [id])

  @@map("node_histories")
}

model Server {
  id       Int     @id @default(autoincrement())
  host     String  @default("")
  port     Int     @default(22)
  username String  @default("")
  password String  @default("")
  active   Boolean
  nodes    Node[]

  @@map("servers")
}

model Payment {
  id       Int      @id @default(autoincrement())
  duration Int      @default(0)
  nodeId   Int      @map("node_id")
  credit   Int
  date     DateTime @default(now())
  stakeId  String?  @map("stake_id")
  node     Node     @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model TxVerifier {
  id       Int    @id @default(autoincrement())
  verifier String @unique
  tx       Json

  @@map("tx_verifiers")
}

model Blockchain {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @default("")
  url         String
  price       Float
  hasWallet   Boolean  @default(false) @map("has_wallet")
  launchedAt  DateTime @default(now()) @map("launched_at")
  Node        Node[]

  @@map("blockchains")
}

model Credit {
  id      Int      @id @default(autoincrement())
  tx      String
  credits Int
  userId  Int      @map("user_id")
  date    DateTime @default(now())
  user    User     @relation(fields: [userId], references: [id])

  @@map("credits")
}

model claims {
  id        Int      @id @default(autoincrement())
  user_id   Int
  address   String
  lasted_at DateTime @default(now())
  amount    Int
  users     User     @relation(fields: [user_id], references: [id])
}

model temp_claims {
  id      Int    @id @default(autoincrement())
  user_id Int
  address String
  amount  Int
  users   User   @relation(fields: [user_id], references: [id])
}

enum Status {
  CREATED
  INSTALLING
  LIVE
  FAILED
  EXPIRED
}
