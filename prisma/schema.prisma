// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator jsonSchema {
    provider              = "prisma-json-schema-generator"
    includeRequiredFields = "true"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id       Int     @id @default(autoincrement())
    address  String  @unique // address is used as email for admins
    password String? // if password is not null, he is admin, otherwise user
    nodes    Node[]

    @@map("users")
}

model Node {
    id        Int      @id @default(autoincrement())
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    paymentId Int      @unique @map("payment_id")
    payment   Payment  @relation(fields: [paymentId], references: [id])
    serverId  Int      @unique @map("server_id")
    Server    Server   @relation(fields: [serverId], references: [id])
    wallet    String?
    createdAt DateTime @default(now()) @map("created_at")

    @@map("nodes")
}

model Server {
    id           Int        @id @default(autoincrement())
    host         String     @default("")
    port         Int        @default(22)
    username     String     @default("")
    password     String     @default("")
    active       Boolean
    node         Node?
    blockchain   Blockchain @relation(fields: [blockchainId], references: [id])
    blockchainId Int        @map("blockchain_id")

    @@map("servers")
}

model Payment {
    id       Int      @id @default(autoincrement())
    tx       String
    duration Int      @default(0)
    node     Node?
    date     DateTime @default(now())

    @@map("payments")
}

model Blockchain {
    id          Int      @id @default(autoincrement())
    name        String
    description String   @default("")
    url         String
    price       Float
    hasWallet   Boolean  @default(false) @map("has_wallet")
    launchedAt  DateTime @default(now()) @map("launched_at")
    servers     Server[]

    @@map("blockchains")
}
