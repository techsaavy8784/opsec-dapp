// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator jsonSchema {
    provider              = "prisma-json-schema-generator"
    includeRequiredFields = "true"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id       Int       @id @default(autoincrement())
    address  String    @unique // address is used as email for admins
    password String? // if password is not null, he is admin, otherwise user
    payments Payment[]

    @@map("users")
}

model Node {
    id        Int       @id @default(autoincrement())
    payments  Payment[]
    wallet    String?
    serverId  Int       @map("server_id")
    server    Server    @relation(fields: [serverId], references: [id])
    isLive    Boolean   @map("is_live")
    createdAt DateTime  @map("created_at")

    @@map("nodes")
}

model Payment {
    id     Int  @id @default(autoincrement())
    User   User @relation(fields: [userId], references: [id])
    userId Int  @map("user_id")
    Node   Node @relation(fields: [nodeId], references: [id])
    nodeId Int  @map("node_id")

    @@map("payments")
}

model Server {
    id           Int         @id @default(autoincrement())
    ssh          String
    command      String
    active       Boolean
    hasWallet    Boolean     @map("has_wallet")
    node         Node[]
    Blockchain   Blockchain? @relation(fields: [blockchainId], references: [id])
    blockchainId Int         @map("blockchain_id")

    @@map("servers")
}

model Blockchain {
    id         Int      @id @default(autoincrement())
    name       String
    url        String
    price      Float
    launchedAt DateTime @default(now()) @map("launched_at")
    Server     Server[]

    @@map("blockchains")
}
