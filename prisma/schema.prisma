generator client {
  provider = "prisma-client-js"
}

generator jsonSchema {
  provider              = "prisma-json-schema-generator"
  includeRequiredFields = "true"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  address  String    @unique
  password String?
  balance  Int       @default(0)
  nodes    Node[]
  credits  Credit[]
  stakings Staking[]
  payments Payment[]

  role    Role      @default(USER)

  Reward   Reward[]
  claims   Claim[]

  @@map("users")
}

model Node {
  id           Int           @id @default(autoincrement())
  userId       Int           @map("user_id")
  user         User          @relation(fields: [userId], references: [id])
  serverId     Int?          @map("server_id")
  server       Server?       @relation(fields: [serverId], references: [id])
  wallet       String?
  status       Status        @default(CREATED)
  createdAt    DateTime      @default(now()) @map("created_at")
  nodeHistory  NodeHistory[]
  payments     Payment[]
  blockchainId Int           @map("blockchain_id")
  blockchain   Blockchain    @relation(fields: [blockchainId], references: [id])

  @@map("nodes")
}

model Staking {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  stakeId   String   @map("stake_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("stakings")
}

model NodeHistory {
  id      Int     @id @default(autoincrement())
  nodeId  Int     @unique @map("node_id")
  node    Node    @relation(fields: [nodeId], references: [id])
  message String?
  status  Status  @default(CREATED)

  @@map("node_histories")
}

model Server {
  id       Int         @id @default(autoincrement())
  host     String      @default("")
  port     Int         @default(22)
  username String      @default("")
  password String      @default("")
  active   Boolean
  nodes    Node[]
  type     SERVER_TYPE @default(MULTI_NODE)

  @@map("servers")
}

model Payment {
  id       Int      @id @default(autoincrement())
  duration Int      @default(0)
  nodeId   Int      @map("node_id")
  node     Node     @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  credit   Int
  stakeId  String?  @map("stake_id")
  date     DateTime @default(now())
  userId   Int?     @map("user_id")
  user     User?    @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@map("payments")
}

model TxVerifier {
  id       Int    @id @default(autoincrement())
  verifier String @unique
  tx       Json

  @@map("tx_verifiers")
}

model Blockchain {
  id             Int      @id @default(autoincrement())
  name           String
  description    String   @default("")
  url            String
  price          Int
  hasWallet      Boolean  @default(false) @map("has_wallet")
  staking        Boolean  @default(true)
  launchedAt     DateTime @default(now()) @map("launched_at")
  Node           Node[]
  payType        PAY_TYPE @default(FULL) @map("pay_type")
  rewardWallet   String?  @map("reward_wallet")
  rewardLockTime Int?     @map("reward_lock_time")
  rewardPerMonth Int?     @map("reward_per_month")
  floorPrice     Int?     @map("floor_price")

  @@map("blockchains")
}

model Credit {
  id      Int      @id @default(autoincrement())
  tx      String
  credits Int
  user    User     @relation(fields: [userId], references: [id])
  userId  Int      @map("user_id")
  date    DateTime @default(now())

  @@map("credits")
}


enum Role {
  USER
  ADMIN
}


model Claim {
  id     Int  @id @default(autoincrement())
  userId Int  @map("user_id")
  amount Int
  user   User @relation(fields: [userId], references: [id])

  @@map("claims")
}

model Reward {
  id                     Int       @id @default(autoincrement())
  userId                 Int       @map("user_id")
  reflectionReward       Int?      @map("reflection_reward")
  rewardWithdrawTime     DateTime? @map("reward_withdraw_time")
  user                   User      @relation(fields: [userId], references: [id])

  @@map("rewards")
}


model TaxHistory {
  id            Int       @id @default(autoincrement())
  amount        Int
  totalOpsec    Int       @map("total_opsec")
  createdAt     DateTime  @default(now()) @map("created_at")

  @@map("tax_histories")
}


enum Status {
  CREATED
  INSTALLING
  LIVE
  FAILED
  EXPIRED
}

enum SERVER_TYPE {
  MULTI_NODE
  SINGLE_NODE
}

enum PAY_TYPE {
  FULL
  PARTIAL

}

